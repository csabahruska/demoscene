{-# LANGUAGE DeriveDataTypeable #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.7.0-dev)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Thrift.ContentProvider_Client(downloadMesh,downloadTexture,downloadGroup,query) where
import Data.IORef
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Int
import Data.Typeable ( Typeable )
import qualified Data.Map as Map
import qualified Data.Set as Set

import Thrift


import Thrift.Content_Types
import Thrift.ContentProvider
seqid = newIORef 0
downloadMesh (ip,op) arg_name = do
  send_downloadMesh op arg_name
  recv_downloadMesh ip
send_downloadMesh op arg_name = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("downloadMesh", M_CALL, seqn)
  write_DownloadMesh_args op (DownloadMesh_args{f_DownloadMesh_args_name=Just arg_name})
  writeMessageEnd op
  tFlush (getTransport op)
recv_downloadMesh ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_DownloadMesh_result ip
  readMessageEnd ip
  case f_DownloadMesh_result_success res of
    Just v -> return v
    Nothing -> do
      throw (AppExn AE_MISSING_RESULT "downloadMesh failed: unknown result")
downloadTexture (ip,op) arg_name arg_imageType arg_width arg_height = do
  send_downloadTexture op arg_name arg_imageType arg_width arg_height
  recv_downloadTexture ip
send_downloadTexture op arg_name arg_imageType arg_width arg_height = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("downloadTexture", M_CALL, seqn)
  write_DownloadTexture_args op (DownloadTexture_args{f_DownloadTexture_args_name=Just arg_name,f_DownloadTexture_args_imageType=Just arg_imageType,f_DownloadTexture_args_width=Just arg_width,f_DownloadTexture_args_height=Just arg_height})
  writeMessageEnd op
  tFlush (getTransport op)
recv_downloadTexture ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_DownloadTexture_result ip
  readMessageEnd ip
  case f_DownloadTexture_result_success res of
    Just v -> return v
    Nothing -> do
      throw (AppExn AE_MISSING_RESULT "downloadTexture failed: unknown result")
downloadGroup (ip,op) arg_name = do
  send_downloadGroup op arg_name
  recv_downloadGroup ip
send_downloadGroup op arg_name = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("downloadGroup", M_CALL, seqn)
  write_DownloadGroup_args op (DownloadGroup_args{f_DownloadGroup_args_name=Just arg_name})
  writeMessageEnd op
  tFlush (getTransport op)
recv_downloadGroup ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_DownloadGroup_result ip
  readMessageEnd ip
  case f_DownloadGroup_result_success res of
    Just v -> return v
    Nothing -> do
      throw (AppExn AE_MISSING_RESULT "downloadGroup failed: unknown result")
query (ip,op) arg_dataPaths = do
  send_query op arg_dataPaths
  recv_query ip
send_query op arg_dataPaths = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("query", M_CALL, seqn)
  write_Query_args op (Query_args{f_Query_args_dataPaths=Just arg_dataPaths})
  writeMessageEnd op
  tFlush (getTransport op)
recv_query ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_Query_result ip
  readMessageEnd ip
  case f_Query_result_success res of
    Just v -> return v
    Nothing -> do
      throw (AppExn AE_MISSING_RESULT "query failed: unknown result")
